@page "/"
@inject ICategoryData categoryData
@inject IStatusData statusData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager
@inject ProtectedSessionStorage sessionStorage
@inject AuthenticationStateProvider authProvider

<h1>Training Suggestions</h1>
<div>
    <button>Suggest</button>
</div>

<div>
    <div>@suggestions?.Count Suggestions</div>
    <div>
        <button @onclick="(() => OrderByNew(true))">New</button>
        <button @onclick="(() => OrderByNew(false))">Popular</button>
    </div>
    <div>
        <input type="text" placeholder="Search" aria-label="Search box" @oninput="((txt) => OnSearchInput((string)txt.Value))" />
    </div>
</div>

<div>
    <div>
        @if (suggestions is not null)
        {
            // Virtualize makes it a scrolling list, without paging, it will render just as much as needed
            // like a ForEach, Context="s" is the variable in the loop for each suggestion
            // OverscanCount will show only the number of elements which show on the page + 10
            // TC did it so it will load all records from memory, there are other approaches where it will query as you scroll like paging
            <Virtualize Items="@suggestions" Context="s" OverscanCount="10">
                <div>
                    <div @onclick="(() => VoteUp(s))">
                        <div>@GetUpvoteTopText(s)</div>
                        <span class="oi oi-caret-top"></span>
                        <div>@GetUpvoteBottomText(s)</div>
                    </div>
                    <div @onclick="(() => OpenDetails(s))">
                        @s.Suggestion
                    </div>
                    <div>
                        <div @onclick="(() => OpenDetails(s))">
                            @s.Category?.CategoryName
                        </div>
                    </div>
                    <div>
                        @s.SuggestionStatus?.StatusName
                    </div>
                </div>
            </Virtualize>
        }
    </div>
    <div>
        @if (categories is not null)
        {
            <div>
                <span>Category</span>
                <div @onclick="(() => OnCategoryClick())">All</div>
                @foreach(var c in categories)
                {
                    <div @onclick="(() => OnCategoryClick(c.CategoryName))">@c.CategoryName</div>
                }
            </div>
        }
        @if (statuses is not null)
        {
            <div>
                <span>Status</span>
                <div @onclick="(() => OnStatusClick())">All</div>
                @foreach(var s in statuses)
                {
                    <div @onclick="(() => OnStatusClick(s.StatusName))">@s.StatusName</div>
                }
            </div>            
        }
    </div>
</div>


@code {
    private UserModel loggedInUser;

    private List<SuggestionModel> suggestions;
    private List<CategoryModel> categories;
    private List<StatusModel> statuses;

    private string selectedCategory = "All";
    private string selectedStatus = "All";
    private string searchText = "";
    bool isSortedByNew = true;

    protected async override Task OnInitializedAsync()
    {
        categories = await categoryData.GetAllCategories();
        statuses = await statusData.GetAllStatuses();
        await LoadAndVerifyUser();
    }

    private async Task LoadAndVerifyUser()
    {
        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        // you are logged in
        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await userData.GetUserFromAuthentication(objectId) ?? new();

            string firstName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("givenname"))?.Value;
            string lastName = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("surname"))?.Value;

            // for displayName ddi not use Contains as givename and surname also have "name" in it
            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("email"))?.Value;

            // when we first log in loggedInUser will be null, so will get a new one, after that he
            // populates the data from claims and wanted to then save user into db with lastest data from A2B

            // have we changed the logged in user
            bool isDirty = false;
            if ((objectId == loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            if ((firstName == loggedInUser.FirstName) == false)
            {
                // new user
                isDirty = true;
                loggedInUser.FirstName = firstName;
            }
            if ((lastName == loggedInUser.LastName) == false)
            {
                // new user
                isDirty = true;
                loggedInUser.LastName = lastName;
            }
            if ((displayName == loggedInUser.DisplayName) == false)
            {
                // new user
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if ((email == loggedInUser.EmailAddress) == false)
            {
                // new user
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }

            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await userData.CreateUser(loggedInUser);
                } 
                else
                {
                    await userData.UpdateUser(loggedInUser);
                }
            }
        }
    }

    // blazor calls this twice the first time, intially it prerenders the page so the use sees something (firstRender)
    // prerender happens from _Host.cshtml file <component type="typeof(App)" render-mode="ServerPrerendered" />
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        // first time page is rendered
        if (firstRender)
        {
            // we did this all in OnAfterRenderAsync as we need session state which is only available after the page is rendered
            await LoadFilterState();
            await FilterSuggestions();
            StateHasChanged();  // tells blazor to update the page (normally we don't do this but because we did it in OnAfterRenderAsync)
        }
    }

    private async Task LoadFilterState()
    {
        var stringResults = await sessionStorage.GetAsync<string>(nameof(selectedCategory));
        selectedCategory = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(selectedStatus));
        selectedStatus = stringResults.Success ? stringResults.Value : "All";

        stringResults = await sessionStorage.GetAsync<string>(nameof(searchText));
        searchText = stringResults.Success ? stringResults.Value : "";

        var boolResults = await sessionStorage.GetAsync<bool>(nameof(isSortedByNew));
        isSortedByNew = stringResults.Success ? boolResults.Value : true; 
    }

    private async Task SaveFilterState()
    {
        await sessionStorage.SetAsync(nameof(selectedCategory), selectedCategory);
        await sessionStorage.SetAsync(nameof(selectedStatus), selectedStatus);
        await sessionStorage.SetAsync(nameof(searchText), searchText);
        await sessionStorage.SetAsync(nameof(isSortedByNew), isSortedByNew);
    }

    private async Task FilterSuggestions()
    {
        var output = await suggestionData.GetAllApprovedSuggestionsAsync();

        if (selectedCategory != "All")
        {
            output = output.Where(s => s.Category?.CategoryName == selectedCategory).ToList();
        }

        if (selectedStatus != "All")
        {
            output = output.Where(s => s.SuggestionStatus?.StatusName == selectedStatus).ToList();
        }

        if (string.IsNullOrWhiteSpace(searchText) == false)
        {
            output = output.Where(s => s.Suggestion.Contains(searchText, StringComparison.InvariantCultureIgnoreCase) || 
                s.Description.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }

        if (isSortedByNew)
        {
            output = output.OrderByDescending(s => s.DateCreated).ToList();
        }
        else
        {
            output = output.OrderByDescending(s => s.UserVotes.Count).ThenBy(s => s.DateCreated).ToList();
        }

        suggestions = output;

        await SaveFilterState();
    }

    private async Task OrderByNew(bool isNew)
    {
        isSortedByNew = isNew;
        await FilterSuggestions();
    }

    private async Task OnSearchInput(string searchInput)
    {
        searchText = searchInput;
        await FilterSuggestions();
    }

    private async Task OnCategoryClick(string category = "All")
    {
        selectedCategory = category;
        await FilterSuggestions();
    }

    private async Task OnStatusClick(string status = "All")
    {
        selectedStatus = status;
        await FilterSuggestions();
    }

    private async Task VoteUp(SuggestionModel suggestion)
    {
        if (loggedInUser is not null)
        {
            if (suggestion.Author.Id == loggedInUser.Id)
            {
                // Can't vote on your own suggestion
                return;
            }

            // UserVotes is a HashSet, so Add will not allow duplicates if you already voted, Add returns boolean if
            // it allowed Add or not
            if (suggestion.UserVotes.Add(loggedInUser.Id) == false)
            {
                // treat as unvote
                suggestion.UserVotes.Remove(loggedInUser.Id);
            }

            // save the add or remove to the db, the above .Add or .Remove will only update UI, still need to trigger db save
            await suggestionData.UpvoteSuggestion(suggestion.Id, loggedInUser.Id);

            if (isSortedByNew == false)
            {
                suggestions = suggestions.OrderByDescending(s => s.UserVotes.Count)
                .ThenByDescending(s => s.DateCreated).ToList();
            }
        }
        else
        {
            // if you try to upvote and are not logged in will redirect to login
            // forceLoad = true (2nd param) is needed as that url is outside blazor so force it to go
            navManager.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
        }
    }

    private string GetUpvoteTopText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 0)
        {
            return suggestion.UserVotes.Count.ToString("00"); // want to display as 2 digit format
        }
        else
        {
            if (suggestion.Author.Id == loggedInUser?.Id)
            {
                return "Awaiting";  // you can't vote for your own suggestion
            }
            else
            {
                return "Click To";
            }
        }
    }

    private string GetUpvoteBottomText(SuggestionModel suggestion)
    {
        if (suggestion.UserVotes?.Count > 1)
        {
            return "Upvotes";
        }
        else
        {
            return "Upvote";
        }
    }

    private void OpenDetails(SuggestionModel suggestion)
    {
        navManager.NavigateTo($"/Details/{suggestion.Id}");
    }
}
